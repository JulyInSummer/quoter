// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JulyInSummer/quoter_app/internal/storage (interfaces: RepoI)
//
// Generated by this command:
//
//	mockgen -destination repo.go -package mock_storage github.com/JulyInSummer/quoter_app/internal/storage RepoI
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	models "github.com/JulyInSummer/quoter_app/internal/storage/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepoI is a mock of RepoI interface.
type MockRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockRepoIMockRecorder
	isgomock struct{}
}

// MockRepoIMockRecorder is the mock recorder for MockRepoI.
type MockRepoIMockRecorder struct {
	mock *MockRepoI
}

// NewMockRepoI creates a new mock instance.
func NewMockRepoI(ctrl *gomock.Controller) *MockRepoI {
	mock := &MockRepoI{ctrl: ctrl}
	mock.recorder = &MockRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoI) EXPECT() *MockRepoIMockRecorder {
	return m.recorder
}

// CreateQuote mocks base method.
func (m *MockRepoI) CreateQuote(ctx context.Context, quote models.Quote) (*models.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuote", ctx, quote)
	ret0, _ := ret[0].(*models.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuote indicates an expected call of CreateQuote.
func (mr *MockRepoIMockRecorder) CreateQuote(ctx, quote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuote", reflect.TypeOf((*MockRepoI)(nil).CreateQuote), ctx, quote)
}

// DeleteQuote mocks base method.
func (m *MockRepoI) DeleteQuote(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuote", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuote indicates an expected call of DeleteQuote.
func (mr *MockRepoIMockRecorder) DeleteQuote(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuote", reflect.TypeOf((*MockRepoI)(nil).DeleteQuote), ctx, id)
}

// GetAllQuotes mocks base method.
func (m *MockRepoI) GetAllQuotes(ctx context.Context, author string) ([]models.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuotes", ctx, author)
	ret0, _ := ret[0].([]models.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuotes indicates an expected call of GetAllQuotes.
func (mr *MockRepoIMockRecorder) GetAllQuotes(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuotes", reflect.TypeOf((*MockRepoI)(nil).GetAllQuotes), ctx, author)
}

// GetQuoteByID mocks base method.
func (m *MockRepoI) GetQuoteByID(ctx context.Context, id int) (*models.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuoteByID", ctx, id)
	ret0, _ := ret[0].(*models.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuoteByID indicates an expected call of GetQuoteByID.
func (mr *MockRepoIMockRecorder) GetQuoteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuoteByID", reflect.TypeOf((*MockRepoI)(nil).GetQuoteByID), ctx, id)
}

// GetRandomQuote mocks base method.
func (m *MockRepoI) GetRandomQuote(ctx context.Context) (*models.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote", ctx)
	ret0, _ := ret[0].(*models.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockRepoIMockRecorder) GetRandomQuote(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockRepoI)(nil).GetRandomQuote), ctx)
}
